stages:
  - build
  - manual_action
  - test

image: ${CI_DOCKER_REGISTRY}/esp32-ci-env

variables:
  # GIT_STRATEGY - use option from "CI / CD Settings" - "General pipelines"
  GIT_SUBMODULE_STRATEGY: normal

  CONF_BUILD: "x86_64-linux-gnu"
  CONF_TARGET: "xtensa-esp32-elf"

  ARCHIVE_TOOL: "tar czvf" # 'v' we need to check the contents of the archive by log
  UNARCHIVE_TOOL: "tar xvf"
  ARCHIVE_EXT: "tar.gz"

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

.add_gitlab_key: &add_gitlab_key |
  cit_add_ssh_key "${GITLAB_KEY}"

before_script:
  - *use_ci_tools
  - *add_gitlab_key

# Prepare release name/number
.get_release_name: &get_release_name |
  # using annotated tags
  REL_NUM=$(git describe --abbrev=6)
  REL_SFX="gcc8_2_0"
  REL_NAME=xtensa-esp32-elf-${REL_SFX}-${REL_NUM}-${PLATFORM_NAME}
  ARCHIVE_NAME=${REL_NAME}.${ARCHIVE_EXT}
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_NUM: $REL_NUM"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

# Configure crosstool-NG
.build_ctng: &build_ctng |
  ./bootstrap
  ./configure --enable-local
  make
  ./ct-ng ${CONF_TARGET}

# ct-ng options common for all platforms
.configure_common: &configure_common |
  echo "# CT_LOG_PROGRESS_BAR is not set" >> .config
  echo "# CT_PREFIX_DIR_RO is not set" >> .config
  echo "CT_LOG_EXTRA=y" >> .config
  echo "CT_LOG_LEVEL_MAX=\"EXTRA\"" >> .config
  echo "CT_USE_MIRROR=y" >> .config
  echo "CT_FORCE_MIRROR=y" >> .config
  echo "CT_MIRROR_BASE_URL=\"${MIRROR_BASE}\"" >> .config
  echo "CT_NEWLIB_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/newlib-cygwin.git\"" >> .config
  echo "CT_GCC_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/gcc.git\"" >> .config
  echo "CT_BINUTILS_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/binutils-gdb.git\"" >> .config
  echo "CT_GDB_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/binutils-gdb.git\"" >> .config

# Configuration specific to Docker
.configure_docker: &configure_docker |
  echo "CT_ALLOW_BUILD_AS_ROOT=y" >> .config
  echo "CT_ALLOW_BUILD_AS_ROOT_SURE=y" >> .config
  echo "CT_CONNECT_TIMEOUT=30" >> .config

# If PIE is enabled by default in build GCC, add a flag to disable it
# For example, it appears on Ubuntu 17.04 or Debian 9
.configure_linux_no_pie: &configure_linux_no_pie |
  gcc -v |& grep -- --enable-default-pie > /dev/null && echo "CT_EXTRA_LDFLAGS_FOR_HOST=\"-no-pie\"" >> .config

# Configuration specific to crossbuilds
.configure_crossbuild: &configure_crossbuild |
  echo "CT_CANADIAN=y" >> .config
  echo "CT_BUILD=\"${CONF_BUILD}\"" >> .config
  echo "CT_BUILD_PREFIX=\"${CONF_BUILD}-\"" >> .config
  echo "CT_BUILD_SUFFIX=\"\"" >> .config
  echo "CT_HOST=\"${CONF_HOST}\"" >> .config
  echo "CT_HOST_PREFIX=\"${CONF_HOST}-\"" >> .config
  echo "CT_HOST_SUFFIX=\"\"" >> .config

  # No support Python in GDB in cross-compilation now,
  # see https://stackoverflow.com/questions/33512541/cross-compiling-gdb-for-arm-with-python-failed#34625177
  echo "# CT_GDB_CROSS_PYTHON is not set" >> .config

# Actual build
.build_toolchain: &build_toolchain |
  ./ct-ng oldconfig
  ./ct-ng build

# Package the toolchain
.package_toolchain: &package_toolchain |
  mkdir -p dist
  pushd builds
  rm -f ${CONF_TARGET}/build.log.bz2
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${CONF_TARGET}/
  mv ${ARCHIVE_NAME} ../dist/
  echo "${ARCHIVE_NAME}" > ../dist/archive_name_${PLATFORM_NAME}
  popd

# Common template for all builds
.build_template: &build_template
  stage: build
  artifacts:
    paths:
      - .config
      - build.log
      - dist
    when: always
    expire_in: 6 weeks
  after_script:
    # save artifacts in any case (both failure or success)
    - git add -f dist build.log .config
    - git clean -d -x -f -f

.build_template_linux: &build_template_linux
  <<: *build_template
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_linux_no_pie
    - *build_toolchain
    - *package_toolchain

.manual_action: &manual_action
  stage: manual_action
  tags:
    - deploy
  when: manual
  allow_failure: true

build_linux_amd64:
  <<: *build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  variables:
    PLATFORM_NAME: "linux-amd64"

build_linux_i686:
  <<: *build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-x86
  variables:
    PLATFORM_NAME: "linux-i686"

build_macos:
  <<: *build_template
  image: ci.espressif.cn:42348/esp32-toolchain-macos-cross
  variables:
    CONF_HOST: "x86_64-apple-darwin12"
    PLATFORM_NAME: "macos"
    MACOSX_DEPLOYMENT_TARGET: "10.8"
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_crossbuild
    - *build_toolchain
    - *package_toolchain

build_windows:
  <<: *build_template
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-win-cross
  variables:
    CONF_HOST: "i686-w64-mingw32"
    PLATFORM_NAME: "win32"
    ARCHIVE_TOOL: "zip -r"
    ARCHIVE_EXT: "zip"
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_crossbuild
    - *build_toolchain
    - *package_toolchain

build_linux_armel:
  <<: *build_template
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-arm-cross
  variables:
    CONF_HOST: "arm-linux-gnueabi"
    PLATFORM_NAME: "linux-armel"
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_linux_no_pie
    - *configure_crossbuild

    # To avoid the issue caused by running armel-binary on the armhf platform (RPi3):
    # "liblto_plugin.so: cannot open shared object file: No such file or directory"
    # This is a common case for dynamically linked binaries, not specfic liblto_plugin only
    - echo "CT_STATIC_TOOLCHAIN=y" >> .config

    - *build_toolchain
    - *package_toolchain

test_arm_rpi:
  stage: test
  image: $CI_DOCKER_REGISTRY/rpi-esp-idf-env:1
  tags:
    - linux_arm
  dependencies:
    - build_linux_armel
  # It allows failure because the RPi runner is not stable
  allow_failure: true
  variables:
    GIT_STRATEGY: none
    IDF_PATH: "${CI_PROJECT_DIR}/esp-idf"
    PLATFORM_NAME: "linux-armel"
    GITLAB_SSH_BRANCH: "-b master"
    CONF_TARGET: "xtensa-esp32-elf"
  before_script:
    - *use_ci_tools
  after_script:
    - rm -rf ${CI_PROJECT_DIR}/*
  script:
    - pwd; id; uname -a
    - ARCHIVE_NAME=$(cat dist/archive_name_${PLATFORM_NAME})
    - ${UNARCHIVE_TOOL} dist/${ARCHIVE_NAME}
    - export PATH="${CI_PROJECT_DIR}/${CONF_TARGET}/bin:${PATH}"

    - file ./${CONF_TARGET}/bin/${CONF_TARGET}-gcc
    - ./${CONF_TARGET}/bin/${CONF_TARGET}-gcc -v

    - cit_add_ssh_key "${GITLAB_KEY}"
    - rm -rf ${IDF_PATH}
    - git clone -q --depth 1 ${GITLAB_SSH_BRANCH} ${GITLAB_SSH_SERVER}/idf/esp-idf ${IDF_PATH}
    - cd ${IDF_PATH}
    - ./tools/ci/mirror-submodule-update.sh
    - source add_path.sh
    - cd ${IDF_PATH}/examples/get-started/hello_world
    - idf.py build

esp-tests:
  stage: test
  image: $CI_DOCKER_REGISTRY/compiler-testsuite:1
  dependencies:
    - build_linux_amd64
  variables:
    GIT_STRATEGY: none
    PLATFORM_NAME: "linux-amd64"
  artifacts:
    when: always
    paths:
      - esp-compiler-tests/*/*.log
      - esp-compiler-tests/*/*.elf
  before_script:
    - *use_ci_tools
    - *add_gitlab_key
  after_script:
    - source citools/import_functions
    - cit_rm xtensa-esp32-elf
  script:
    - ARCHIVE_NAME=$(cat dist/archive_name_${PLATFORM_NAME})
    - ${UNARCHIVE_TOOL} dist/${ARCHIVE_NAME}
    - ./xtensa-esp32-elf/bin/xtensa-esp32-elf-gcc -v
    - export PATH="${CI_PROJECT_DIR}/xtensa-esp32-elf/bin:${PATH}"
    # Get and run tests
    - ESP_COMPILER_TESTS_BRANCH="-b master"
    - git clone --depth 1 $ESP_COMPILER_TESTS_BRANCH ${GITLAB_SSH_SERVER}/idf/esp-compiler-tests.git
    - cd esp-compiler-tests
    - source xtensa-esp32-profile
    - ./run-all.sh

upload_to_http:
  <<: *manual_action
  variables:
    GIT_STRATEGY: none
  before_script:
    - *use_ci_tools
  script:
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}" "$(cit_parse_url_host ${HTTP_UPLOAD_DIR})"
    # List of archives in dist/
    - FILES=$(find dist -name archive_name_\* -exec cat {} \+)
    - cd dist
    - scp ${FILES} ${HTTP_UPLOAD_DIR}
    # Show info
    - echo -e "\nArchives were published there:\n\n$(for n in ${FILES}; do echo "${HTTP_PUBLIC_DIR}/${n}"; done)\n"
